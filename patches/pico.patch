diff --git a/src/HAMqttDevice.cpp b/src/HAMqttDevice.cpp
index 8e5c3c5..2fd2c6b 100644
--- a/src/HAMqttDevice.cpp
+++ b/src/HAMqttDevice.cpp
@@ -1,15 +1,26 @@
 #include "HAMqttDevice.h"
+#include <algorithm>
 
 HAMqttDevice::HAMqttDevice(
-    const String &name,
+    const std::string &name,
     const DeviceType type,
-    const String &haMQTTPrefix) : _name(name),
-                                  _type(type)
+    const std::string &haMQTTPrefix) : _name(name),
+                                       _type(type)
 {
     // Id = name to lower case replacing spaces by underscore (ex: name="Kitchen Light" -> id="kitchen_light")
     _identifier = name;
-    _identifier.replace(' ', '_');
-    _identifier.toLowerCase();
+    std::transform(_identifier.begin(), _identifier.end(), _identifier.begin(),
+                   [](unsigned char c)
+                   {
+                       unsigned char space = ' ';
+                       unsigned char underscore = '_';
+                       if (c == space)
+                       {
+                           return underscore;
+                       }
+                       unsigned char lower = std::tolower(c);
+                       return lower;
+                   });
 
     // Define the MQTT topic of the device
     _topic = haMQTTPrefix + '/' + deviceTypeToStr(_type) + '/' + _identifier;
@@ -71,13 +82,13 @@ HAMqttDevice &HAMqttDevice::enableAttributesTopic()
     return *this;
 }
 
-HAMqttDevice &HAMqttDevice::addConfigVar(const String &name, const String &value)
+HAMqttDevice &HAMqttDevice::addConfigVar(const std::string &name, const std::string &value)
 {
     _configVars.push_back({name, value});
     return *this;
 }
 
-HAMqttDevice &HAMqttDevice::addAttribute(const String &name, const String &value)
+HAMqttDevice &HAMqttDevice::addAttribute(const std::string &name, const std::string &value)
 {
     _attributes.push_back({name, value});
     return *this;
@@ -89,51 +100,57 @@ HAMqttDevice &HAMqttDevice::clearAttributes()
     return *this;
 }
 
-const String HAMqttDevice::getConfigPayload() const
+const std::string HAMqttDevice::getConfigPayload() const
 {
-    String configPayload = "{";
+    std::string configPayload = "{";
 
     for (uint8_t i = 0; i < _configVars.size(); i++)
     {
-        configPayload.concat('"');
-        configPayload.concat(_configVars[i].key);
-        configPayload.concat("\":");
+        configPayload = configPayload + "\"" + _configVars[i].key + "\":";
 
         bool valueIsDictionnary = _configVars[i].value[0] == '{';
 
         if (!valueIsDictionnary)
-            configPayload.concat('"');
+        {
+            configPayload = configPayload + "\"";
+        }
 
-        configPayload.concat(_configVars[i].value);
+        configPayload = configPayload + _configVars[i].value;
 
         if (!valueIsDictionnary)
-            configPayload.concat('"');
+        {
+            configPayload = configPayload + "\"";
+        }
 
-        configPayload.concat(',');
+        configPayload = configPayload + ",";
     }
-    configPayload.setCharAt(configPayload.length() - 1, '}');
+
+    configPayload.pop_back();
+    configPayload = configPayload + "}";
 
     return configPayload;
 }
 
-const String HAMqttDevice::getAttributesPayload() const
+const std::string HAMqttDevice::getAttributesPayload() const
 {
-    String attrPayload = "{";
+    std::string attrPayload = "{";
 
     for (uint8_t i = 0; i < _attributes.size(); i++)
     {
-        attrPayload.concat('"');
-        attrPayload.concat(_attributes[i].key);
-        attrPayload.concat("\":\"");
-        attrPayload.concat(_attributes[i].value);
-        attrPayload.concat("\",");
+        attrPayload = attrPayload + "\"";
+        attrPayload = attrPayload + _attributes[i].key;
+        attrPayload = attrPayload + "\": \"";
+        attrPayload = attrPayload + _attributes[i].value;
+        attrPayload = attrPayload + "\",";
     }
-    attrPayload.setCharAt(attrPayload.length() - 1, '}');
+
+    attrPayload.pop_back();
+    attrPayload = attrPayload + "}";
 
     return attrPayload;
 }
 
-String HAMqttDevice::deviceTypeToStr(DeviceType type)
+std::string HAMqttDevice::deviceTypeToStr(DeviceType type)
 {
     switch (type)
     {
diff --git a/src/HAMqttDevice.h b/src/HAMqttDevice.h
index 5ddde71..3eaf318 100644
--- a/src/HAMqttDevice.h
+++ b/src/HAMqttDevice.h
@@ -1,8 +1,8 @@
 #ifndef HA_MQTT_DEVICE_H
 #define HA_MQTT_DEVICE_H
 
-#include "Arduino.h"
 #include <vector>
+#include <string>
 
 class HAMqttDevice
 {
@@ -26,33 +26,33 @@ public:
 
 private:
     // Device proprieties
-    const String _name;
+    const std::string _name;
     const DeviceType _type;
 
-    String _identifier;
-    String _topic;
+    std::string _identifier;
+    std::string _topic;
 
     // Config variables handling
     struct ConfigVar
     {
-        String key;
-        String value;
+        std::string key;
+        std::string value;
     };
     std::vector<ConfigVar> _configVars;
 
     // Device attributes handling
     struct Attribute
     {
-        String key;
-        String value;
+        std::string key;
+        std::string value;
     };
     std::vector<Attribute> _attributes;
 
 public:
     HAMqttDevice(
-        const String &name,
+        const std::string &name,
         const DeviceType type,
-        const String &haMQTTPrefix = "ha");
+        const std::string &haMQTTPrefix = "ha");
 
     ~HAMqttDevice();
 
@@ -60,21 +60,21 @@ public:
     HAMqttDevice &enableStateTopic();
     HAMqttDevice &enableAttributesTopic();
 
-    HAMqttDevice &addConfigVar(const String &key, const String &value);
-    HAMqttDevice &addAttribute(const String &key, const String &value);
+    HAMqttDevice &addConfigVar(const std::string &key, const std::string &value);
+    HAMqttDevice &addAttribute(const std::string &key, const std::string &value);
     HAMqttDevice &clearAttributes();
 
-    const String getConfigPayload() const;
-    const String getAttributesPayload() const;
+    const std::string getConfigPayload() const;
+    const std::string getAttributesPayload() const;
 
-    inline const String getTopic() const { return _topic; }
-    inline const String getStateTopic() const { return _topic + "/state"; }
-    inline const String getConfigTopic() const { return _topic + "/config"; }
-    inline const String getAttributesTopic() const { return _topic + "/attr"; }
-    inline const String getCommandTopic() const { return _topic + "/cmd"; }
+    inline const std::string getTopic() const { return _topic; }
+    inline const std::string getStateTopic() const { return _topic + "/state"; }
+    inline const std::string getConfigTopic() const { return _topic + "/config"; }
+    inline const std::string getAttributesTopic() const { return _topic + "/attr"; }
+    inline const std::string getCommandTopic() const { return _topic + "/cmd"; }
 
 private:
-    static String deviceTypeToStr(DeviceType type);
+    static std::string deviceTypeToStr(DeviceType type);
 };
 
 #endif
\ No newline at end of file
